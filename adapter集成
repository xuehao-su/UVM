class mcdf_bus_env extends uvm_env;

  mcdf_bus_agent agent;
  mcdf_rgm rmg;
  reg2mcdf_adapter reg2mcdf;
  `uvm_component_utils(mcdf_bus_env)
  
  function void build_phase(uvm_phase phase);
    agent = mcdf_bus_agent::type_id::create("agent",this);
    if(!uvm_config_db#(mcdf_rgm)::get(this,"","rgm", rgm)) begin
      `uvm_info("GETRGM", "no top down rgm handle is assigned", UVM_LOW)
      rgm = mcdf_rgm::type_id::create("rgm", this);
      `uvm_info("NEWRGM", "created rgm instance locally", UVM_LOW)
    end
    
    rgm.build();
    rgm.map.set_auto_predict();
    reg2mcdf = reg2mcdf_adapter::type_id::create("reg2mcdf");
  endfunction
  function void connect_phase(uvm_phase phase);
    rgm.map.set_sequencer(agent.sequencer, reg2mcdf);
  endfunction
endclass

class test1 extends uvm_test;
  mcdf_rgm rgm;
  mcdf_bus_env env;
  `uvm_component_utils(test1)
  
  function void build_phase(uvm_phase phase);
    rgm = mcdf_rgm::type_id::create("rgm", this);
    uvm_config_db#(mcdf_rgm)::set(this, "env", "rgm", rgm);
    env = mcdf_bus_env::type_id::create("env", this);
  endfunction
  task run_phase(uvm_phase phase);
  //
  endtask
endclass
