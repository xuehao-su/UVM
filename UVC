class mcdf_bus_trans extends uvm_sequence_item;
  rand bit[1:0] cmd;
  rand bit[7:0] addr;
  rand bit[31:0] wdata;
  bit[31:0] rdata;
  `uvm_object_utils_begin(mcdf_bus_trans)
  
  `uvm_object_utils_end
  
endclass

class mcdf_bus_monitor extends uvm_monitor;
  virtual mcdf_if vif;
  uvm_analysis_port #(mcdf_bus_trans) ap;
  `uvm_component_utils(mcdf_bus_monitor)
  
  function void build_phase(uvm_phase phase);
    if(!uvm_config_db#(virtual mcdf_if)::get(this,"","vif",vif))begin
      `uvm_error("GETVIF","no virtual interface is assigned")
    end
    ap = new("ap",this);
  endfunction
  
  task run_phase(uvm_phase phase);
    forever begin
      mon_trans();
    end
  endtask
  
  task mon_trans();
    mcdf_bus_trans t;
    @(posedge vif.clk);
    if(vif.cmd == `WRITE) begin
       t = new();
       t.cmd = `WRITE;
       t.addr = vif.addr;
       t.wdata = vif.wdata;
       ap.write(t);
     end
     else if(vif.cmd == `READ) begin
       t.new();
       t.cmd = `READ;
       t.addr = vif.addr;
       fork
         @(posedge vif.clk);
         #10ps;
         t.rdata = vif.rdata;
         ap.write(t);
       join_none
     end
   endtask
 endclass
 
 class mcdf_bus_driver extends uvm_driver;
   virtual mcdf_if vif;
   `uvm_component_utils(mcdf_bus_driver)
   
   function void build_phase(uvm_phase phase);
     if(!uvm_config_db#(virtual mcdf_if)::get(this, "", "vif", vif)) begin
       `uvm_error("GETVIF", "no virtual interface is assigned")
     end
   endfunction
   
   task run_phase(uvm_phase phase);
     REQ tmp;
     mcdf_bus_trans req, rsp;
     reset_listener();
     forever begin
       seq_item_port.get_next_item(tmp);
       void'($cast(req,tmp));
       `uvm_info("DRV", $sformatf("got a item \n %s", req.sprint()), UVM_LOW)
       void'($cast(rsp, req.clone()));
       rsp.set_sequence_id(req.get_sequence_id());
       rsp.set_transaction_id(req.get_transaction_id());
       drive_bus(rsp);
       seq_item_port.item_done(rsp);
       `uvm_info("DRV", $sformatf("sent a item \n %s", rsp.sprint()), UVM_LOW)
     end
   endtask
   task reset_listener();
     fork
       forever begin
         @(negedge vif.rstn) drive_idle();
       end
     join_none
   endtask
   task drive_bus(mcdf_bus_trans t);
     case(t.cmd)
       `WRITE: drive_write(t);
       `READ:  drive_read(t);
       `IDLE:  drive_idle(1);
       default: `uvm_error("DRIVE", "invalid mcdf command type received")
     endcase
   endtask
   
   task drive_write(mcdf_bus_trans t);
     @(posedge vif.clk);
     vif.cmd <= t.cmd;
     vif.addr <= t.addr;
     vif.wdata <= w.wdata;
   endtask
   task drive_read(mcdf_bus_trans t);
     @(posedge vif.clk);
     vif.cmd <= t.cmd;
     vif.addr <= t.addr;
     @(posedge vif.clk);
     #10ps;
     t.rdata = vif.rdata
   endtask
   
   task drive_idle(bit is_sync= 0);
     if(is_sync) @(posedge vif.clk);
     vif.cmd <= 'h0;
     vif.addr <= 'h0;
     vif.wdata <= 'h0;
   endtask
 endclass
 class mcdf_bus_agent extends uvm_agent;
   mcdf_bus_driver driver;
   mcdf_bus_sequencer sequencer;
   mcdf_bus_monitor monitor;
   `uvm_component_utils(mcdf_bus_agent)
   
   function void build_phase(uvm_phase phase);
     driver = mcdf_bus_driver::type_id::create("driver", this);
     sequencer = mcdf_bus_sequencer::type_id::create("sequencer", this);
     monitor = mcdf_bus_monitor::type_id::create("monitor", this);
   endfunction
   
   function void connect_phase(uvm_phase phase);
     driver.seq_item_port.connect(sequencer.seq_item_export);
   endfunction
   
 endclass
    
   
   
